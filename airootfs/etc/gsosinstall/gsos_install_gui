#!/usr/bin/python3
import sys
from PyQt5.QtWidgets import QVBoxLayout, QApplication, QMainWindow, QSizePolicy, QStackedWidget, QVBoxLayout, QWidget, QLabel, QPushButton, QComboBox, QLineEdit, QTextEdit, QHBoxLayout
from PyQt5.QtCore import Qt, QProcess
from PyQt5.QtGui import QFont
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QMessageBox
import subprocess
import time

DistroName = "HoloISO"

class WelcomePage(QWidget):
    def __init__(self, next_callback, parent=None):
        super(WelcomePage, self).__init__(parent)
        layout = QVBoxLayout(self)
        label = QLabel(f"Welcome to the {DistroName} Installer!", self)
        label.setAlignment(Qt.AlignCenter)
        layout.addWidget(label)

        next_button = QPushButton("Next", self)
        next_button.clicked.connect(next_callback)
        layout.addWidget(next_button)

class DriveSelectionPage(QWidget):
    def __init__(self, next_callback, prev_callback, parent=None):
        super(DriveSelectionPage, self).__init__(parent)

        self.next_callback = next_callback
        self.prev_callback = prev_callback

        layout = QVBoxLayout(self)

        self.drive_var = QComboBox(self)
        self.username_var = QLineEdit(self)
        self.password_var = QLineEdit(self)
        self.password_var.setEchoMode(QLineEdit.Password)
        self.root_password_var = QLineEdit(self)
        self.root_password_var.setEchoMode(QLineEdit.Password)

        layout.addWidget(QLabel("Select Drive:", self))
        layout.addWidget(self.drive_var)
        self.drive_var.addItem("")
        # Additional code for displaying drive information
        self.drive_info_label = QLabel("Drive Information: N/A", self)
        layout.addWidget(self.drive_info_label)
        monospace_font = QFont("Monospace")
        monospace_font.setStyleHint(QFont.TypeWriter)
        self.drive_info_label.setFont(monospace_font)
        layout.addWidget(QLabel("Username:", self))
        layout.addWidget(self.username_var)
        layout.addWidget(QLabel("Password:", self))
        layout.addWidget(self.password_var)
        layout.addWidget(QLabel("Root password:", self))
        layout.addWidget(self.root_password_var)

        btn_layout = QHBoxLayout()
        prev_btn = QPushButton("Previous", self)
        prev_btn.clicked.connect(self.on_prev)
        install_btn = QPushButton("Install", self)
        install_btn.clicked.connect(self.on_install)

        btn_layout.addWidget(prev_btn)
        btn_layout.addStretch()
        btn_layout.addWidget(install_btn)

        layout.addLayout(btn_layout)

        # Populate the drive_var dropdown
        self.drive_var.addItems(self.get_physical_drives())
        self.drive_var.currentIndexChanged.connect(self.update_drive_info)

        # Create a layout for the page
        page_layout = QVBoxLayout(self)
        page_layout.setAlignment(Qt.AlignCenter)

        # Set the maximum size for the page
        self.setMaximumSize(650, 600)

        # Add existing layout to the page layout
        page_layout.addLayout(layout)

        # Set size policy to expanding for vertical and horizontal directions
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

    def get_physical_drives(self):
        process = QProcess()
        process.start("lsblk -n -o NAME -d")
        process.waitForFinished()
        result = process.readAllStandardOutput().data().decode('utf-8')
        drives = result.strip().split('\n')
        return drives

    def update_drive_info(self, index):
        drive_name = self.drive_var.currentText()
        try:
            result = subprocess.run(
                ["lsblk", "-n", "-o", "name,size,label,model", f"/dev/{drive_name}"],
                capture_output=True,
                text=True,
                check=True,
            )
            drive_info = result.stdout.strip()
            self.drive_info_label.setText(f"Drive Information:\n{drive_info}")
        except subprocess.CalledProcessError as e:
            print(f"Error retrieving drive information: {e}")
            self.drive_info_label.setText("Drive Information: N/A")

    def on_prev(self):
        self.prev_callback()

    def on_install(self):
        username = self.username_var.text()
        password = self.password_var.text()
        root_password = self.root_password_var.text()
        drive = self.drive_var.currentText()

        if username and password and root_password and drive:
            self.next_callback(username, password, root_password, drive)
        else:
            QMessageBox.warning(self, 'Warning', 'Please fill in all fields.')

class InstallationPage(QWidget):
    def __init__(self, parent=None):
        super(InstallationPage, self).__init__(parent)

        layout = QVBoxLayout(self)

        self.terminal_text = QTextEdit(self)
        self.terminal_text.setReadOnly(True)

        # Set monospace font
        monospace_font = QFont("Monospace")
        monospace_font.setStyleHint(QFont.TypeWriter)
        self.terminal_text.setFont(monospace_font)

        layout.addWidget(QLabel("Installation Process:", self))
        layout.addWidget(self.terminal_text)

        self.process = None

    def on_install(self, username, root_password, password, drive):
        confirmation = QMessageBox.question(self, 'Confirmation', f'Are you sure you want to continue with the installation?\nAll contents and partitions on drive /dev/{drive} will BE ERASED.', QMessageBox.Yes | QMessageBox.No)

        if confirmation == QMessageBox.Yes:
            self.log_to_terminal("Installation started...")
            self.log_to_terminal(f"Selected Drive: {drive}")
            self.log_to_terminal(f"Username: {username}")
            self.log_to_terminal("Installing...")

            command = f"holoiso_installer --drive \"{drive}\" --username \"{username}\" --password \"{root_password}\" --root_password \"{password}\""
            self.process = QProcess()
            self.process.setProcessChannelMode(QProcess.MergedChannels)
            self.process.readyReadStandardOutput.connect(self.read_output)
            self.process.finished.connect(self.on_install_finished)
            self.process.start(command)
        else:
            self.log_to_terminal("Installation aborted. The installer will shut down in 3 seconds...")
            time.sleep(3)
            exit()
    def on_install_finished(self, exit_code, exit_status):
        if exit_status == QProcess.NormalExit and exit_code == 0:
            QMessageBox.warning(self, 'Warning', 'Installation finished!\nYou may reboot your device to try out your installation!')
            self.log_to_terminal("Closing application in 3 seconds...")
            QTimer.singleShot(3000, self.close_application)
        else:
            self.log_to_terminal(f"Installation failed with exit code {exit_code}.")

    def close_application(self):
        self.window().close()
    def read_output(self):
        output = self.process.readAllStandardOutput().data().decode('utf-8')
        self.log_to_terminal(output)

    def log_to_terminal(self, message):
        self.terminal_text.append(message)

    def on_prev(self):
        if self.process and self.process.state() == QProcess.Running:
            self.process.terminate()
            self.process.waitForFinished()

class InstallerApp(QMainWindow):
    def __init__(self):
        super(InstallerApp, self).__init__()

        self.central_widget = QStackedWidget(self)

        welcome_page = WelcomePage(self.on_next_page, self.central_widget)
        drive_selection_page = DriveSelectionPage(self.on_next_page, self.on_prev_page, self.central_widget)
        installation_page = InstallationPage(self.central_widget)

        self.central_widget.addWidget(welcome_page)
        self.central_widget.addWidget(drive_selection_page)
        self.central_widget.addWidget(installation_page)

        self.setCentralWidget(self.central_widget)
        self.setMinimumSize(950, 700)
        title=f"{DistroName} Installer"
        self.setWindowTitle(title)

    def on_next_page(self, username=None, password=None, root_password=None, drive=None):
        current_page = self.central_widget.currentIndex()
        if current_page < self.central_widget.count() - 1:
            self.central_widget.setCurrentIndex(current_page + 1)
            installation_page = self.central_widget.currentWidget()

            if isinstance(installation_page, InstallationPage):
                installation_page.on_install(username, password, root_password, drive)

    def on_prev_page(self):
        current_page = self.central_widget.currentIndex()
        if current_page > 0:
            self.central_widget.setCurrentIndex(current_page - 1)

    def closeEvent(self, event):
        if hasattr(self, 'process') and self.process and self.process.state() == QProcess.Running:
            self.process.terminate()
            self.process.waitForFinished()
        event.accept()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    installer_app = InstallerApp()
    installer_app.show()
    sys.exit(app.exec_())
